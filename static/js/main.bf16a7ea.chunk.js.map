{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","Navbar","props","mode","to","title","about","toggle","role","htmlfor","TextForm","text","setText","heading","hrmlfor","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bf16a7ea.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n\r\n    }\r\n    )\r\n\r\n    const [btnText, setBtnText]=  useState(\"Enable Dark Mode\")\r\n\r\n\r\n\r\n\r\n    const toggleStyle=()=>{\r\n        if(myStyle.color==='black'){\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n\r\n            }\r\n            )\r\n            setBtnText(\"Enable Light Mode\")\r\n\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n        <div className= \"container\" style={myStyle}>\r\n            <h2 className=\"my-2 \">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\"     >\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={toggleStyle}>{btnText}</button>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport {Link  } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n            </li>\r\n\r\n          </ul>\r\n\r\n        </div>\r\n        <div className={`form-check form-switch text-${props.mode==='light' ? 'dark': 'light'}`}>\r\n          <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggle} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n          <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n\r\n    }\r\n\r\n    const handleLClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n\r\n    }\r\n\r\n    const handleCClick = () => {\r\n\r\n        setText(\"\");\r\n        props.showAlert(\"Text Cleared\", \"success\");\r\n\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\")\r\n        text.select();\r\n\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text Copied\", \"success\");\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    const handleExtraSpace = () => {\r\n       let newText = text.split(/[ ]+/);\r\n       setText(newText.join(\" \"))\r\n\r\n       props.showAlert(\"Removed Extra Spaces\", \"success\"    );\r\n\r\n\r\n\r\n\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n\r\n    }\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <div className=\"container\"  style={{color: props.mode==='dark'?'white': 'black'}}>\r\n                <h1 > {props.heading} </h1>\r\n\r\n                <div className=\"mb-3\">\r\n                    <label hrmlfor=\"myBox\" className=\"form-label\" />\r\n                    <textarea className=\"form-control\" value={text}  style={{backgroundColor: props.mode==='dark'?'grey': 'white', color: props.mode==='dark'?'white': 'black'}} onChange={handleOnChange} id=\"myBox\" rows=\"8\" />\r\n                </div>\r\n\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLClick}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>Remove Extra Space</button>\r\n\r\n            </div>\r\n\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white': 'black'}}>\r\n                <h1>Your Text Summary</h1>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter the text to preview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&\r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\nimport{\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n\n  const showAlert=(message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(()=>{\n      setAlert(null);\n\n    },1500);\n\n\n  }\n\n  const toggleMode=()=>{\n\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n\n    else{\n\n    setMode('light');\n    document.body.style.backgroundColor = 'white';\n    showAlert(\"Light mode has been enabled\", \"success\");\n      \n\n    }\n\n\n\n  }\n\n  return (\n    <>\n\n    <Router>  \n      <Navbar title=\"TextUtils\" about=\"About TextUtils\" mode ={mode} toggle={toggleMode}/>\n\n      <Alert alert={alert}/>\n\n      <div className=\"container my-3\">\n\n        \n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n         \n         \n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert}heading=\"Enter the Text to analyze\" mode={mode}/>\n\n\n\n         \n          </Route>\n        </Switch>\n      \n    \n      \n      {/* <About/> */}\n\n      </div>\n      </Router>\n\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}